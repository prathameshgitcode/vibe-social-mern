{"ast":null,"code":"import * as React from 'react';\nimport CSSMotion from 'rc-motion';\nimport { render, unmount } from \"rc-util/es/React/render\";\nimport classNames from 'classnames';\nimport { getTargetWaveColor, getValidateContainer } from './util';\nvar WaveEffect = function WaveEffect(props) {\n  var className = props.className,\n    left = props.left,\n    top = props.top,\n    width = props.width,\n    height = props.height,\n    color = props.color,\n    borderRadius = props.borderRadius,\n    scale = props.scale;\n  var divRef = React.useRef(null);\n  var waveStyle = {\n    left: left,\n    top: top,\n    width: width,\n    height: height,\n    borderRadius: borderRadius.map(function (radius) {\n      return \"\".concat(radius, \"px\");\n    }).join(' '),\n    '--wave-scale': scale\n  };\n  if (color) {\n    waveStyle['--wave-color'] = color;\n  }\n  return /*#__PURE__*/React.createElement(CSSMotion, {\n    visible: true,\n    motionAppear: true,\n    motionName: \"wave-motion\",\n    motionDeadline: 5000,\n    onAppearEnd: function onAppearEnd(_, event) {\n      var _a;\n      if (event.deadline || event.propertyName === 'opacity') {\n        var holder = (_a = divRef.current) === null || _a === void 0 ? void 0 : _a.parentElement;\n        unmount(holder).then(function () {\n          var _a;\n          (_a = holder.parentElement) === null || _a === void 0 ? void 0 : _a.removeChild(holder);\n        });\n      }\n      return false;\n    }\n  }, function (_ref) {\n    var motionClassName = _ref.className;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: divRef,\n      className: classNames(className, motionClassName),\n      style: waveStyle\n    });\n  });\n};\nfunction validateNum(value) {\n  return Number.isNaN(value) ? 0 : value;\n}\nexport default function showWaveEffect(container, node, className) {\n  var nodeStyle = getComputedStyle(node);\n  var nodeRect = node.getBoundingClientRect();\n  // Get wave color from target\n  var waveColor = getTargetWaveColor(node);\n  // Get border radius\n  var borderTopLeftRadius = nodeStyle.borderTopLeftRadius,\n    borderTopRightRadius = nodeStyle.borderTopRightRadius,\n    borderBottomLeftRadius = nodeStyle.borderBottomLeftRadius,\n    borderBottomRightRadius = nodeStyle.borderBottomRightRadius; // Do scale calc\n  var offsetWidth = node.offsetWidth;\n  var scale = validateNum(nodeRect.width / offsetWidth);\n  // Create holder\n  var holder = document.createElement('div');\n  getValidateContainer(container).appendChild(holder);\n  render( /*#__PURE__*/React.createElement(WaveEffect, {\n    left: nodeRect.left,\n    top: nodeRect.top,\n    width: nodeRect.width,\n    height: nodeRect.height,\n    color: waveColor,\n    className: className,\n    scale: scale,\n    borderRadius: [borderTopLeftRadius, borderTopRightRadius, borderBottomRightRadius, borderBottomLeftRadius].map(function (radius) {\n      return validateNum(parseFloat(radius) * scale);\n    })\n  }), holder);\n}","map":null,"metadata":{},"sourceType":"module"}